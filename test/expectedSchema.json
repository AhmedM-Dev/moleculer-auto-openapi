{
  "info": {
    "description": "Foo",
    "title": "Bar",
    "version": "0.0.0"
  },
  "openapi": "3.0.3",
  "tags": [
    {
      "name": "auth"
    },
    {
      "name": "some"
    }
  ],
  "paths": {
    "/api/login-custom-function": {
      "post": {
        "summary": "Login\n            (unknown-action)",
        "tags": [
          "auth"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ReturnedData"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "422": {
            "$ref": "#/components/responses/ValidationError"
          },
          "default": {
            "$ref": "#/components/responses/ServerError"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "example": {
                  "login": "",
                  "pass": ""
                }
              }
            }
          }
        }
      }
    },
    "/api/upload": {
      "put": {
        "summary": "(some.upload)",
        "tags": [
          "some"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "example": {
                      "id": 1,
                      "filename": "foo.txt",
                      "mimetype": "text/plain",
                      "sizeInBytes": 100
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/FileNotExist"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "413": {
            "$ref": "#/components/responses/FileTooBig"
          },
          "422": {
            "$ref": "#/components/responses/ValidationError"
          },
          "default": {
            "$ref": "#/components/responses/ServerError"
          }
        },
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/update/{id}": {
      "patch": {
        "summary": "Foo bar baz\n            (some.update)",
        "tags": [
          "some"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ReturnedData"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "422": {
            "$ref": "#/components/responses/ValidationError"
          },
          "default": {
            "$ref": "#/components/responses/ServerError"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/some.update"
              }
            }
          }
        }
      }
    },
    "/api/find": {
      "get": {
        "summary": "Some find summary\n            (some.find)",
        "tags": [
          "some"
        ],
        "parameters": [
          {
            "name": "populate[]",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "fields[]",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "offset",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "search",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "searchFields[]",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "query[]",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ReturnedData"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "422": {
            "$ref": "#/components/responses/ValidationError"
          },
          "default": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "DbMixinList": {
        "type": "object",
        "properties": {
          "rows": {
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "totalCount": {
            "type": "number"
          }
        }
      },
      "DbMixinFindList": {
        "type": "array",
        "items": {
          "type": "object"
        }
      },
      "Item": {
        "type": "object"
      },
      "unknown-action": {
        "type": "object",
        "properties": {}
      },
      "some.upload": {
        "type": "object",
        "properties": {}
      },
      "some.update": {
        "type": "object",
        "properties": {
          "numberBy": {
            "example": null,
            "type": "number"
          },
          "someNum": {
            "description": "Is some num",
            "example": null,
            "type": "number"
          },
          "types": {
            "description": "Types arr",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/some.update.types"
            }
          },
          "bars": {
            "description": "Bars arr",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/some.update.bars"
            }
          },
          "someObj": {
            "description": "Some obj",
            "$ref": "#/components/schemas/some.update.someObj"
          },
          "someBool": {
            "example": false,
            "type": "boolean"
          },
          "desc": {
            "example": "",
            "type": "string"
          }
        },
        "required": [
          "numberBy",
          "someNum",
          "bars",
          "someObj"
        ]
      },
      "some.update.types": {
        "type": "object",
        "properties": {
          "id": {
            "example": null,
            "type": "number"
          },
          "typeId": {
            "example": null,
            "type": "number"
          }
        }
      },
      "some.update.bars": {
        "type": "object",
        "properties": {
          "id": {
            "example": null,
            "type": "number"
          },
          "fooNum": {
            "description": "fooNum",
            "example": null,
            "type": "number"
          }
        }
      },
      "some.update.someObj": {
        "type": "object",
        "properties": {
          "id": {
            "description": "Some obj ID",
            "example": null,
            "type": "number"
          },
          "numberId": {
            "example": null,
            "type": "number"
          },
          "name": {
            "example": "",
            "type": "string"
          }
        }
      }
    },
    "securitySchemes": {},
    "responses": {
      "ServerError": {
        "description": "Server errors: 500, 501, 400, 404 and etc...",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "example": {
                "name": "MoleculerClientError",
                "message": "Server error message",
                "code": 500
              }
            }
          }
        }
      },
      "UnauthorizedError": {
        "description": "Need auth",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "example": {
                "name": "MoleculerClientError",
                "message": "Unauth error message",
                "code": 401
              }
            }
          }
        }
      },
      "ValidationError": {
        "description": "Fields invalid",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "example": {
                "name": "MoleculerClientError",
                "message": "Error message",
                "code": 422,
                "data": [
                  {
                    "name": "fieldName",
                    "message": "Field invalid"
                  },
                  {
                    "name": "arrayField[0].fieldName",
                    "message": "Whats wrong"
                  },
                  {
                    "name": "object.fieldName",
                    "message": "Whats wrong"
                  }
                ]
              }
            }
          }
        }
      },
      "ReturnedData": {
        "description": "",
        "content": {
          "application/json": {
            "schema": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/DbMixinList"
                },
                {
                  "$ref": "#/components/schemas/DbMixinFindList"
                },
                {
                  "$ref": "#/components/schemas/Item"
                }
              ]
            }
          }
        }
      },
      "FileNotExist": {
        "description": "File not exist",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "example": {
                "name": "MoleculerClientError",
                "message": "File missing in the request",
                "code": 400
              }
            }
          }
        }
      },
      "FileTooBig": {
        "description": "File too big",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "example": {
                "name": "PayloadTooLarge",
                "message": "Payload too large",
                "code": 413,
                "type": "PAYLOAD_TOO_LARGE",
                "data": {
                  "fieldname": "file",
                  "filename": "4b2005c0b8.png",
                  "encoding": "7bit",
                  "mimetype": "image/png"
                }
              }
            }
          }
        }
      }
    }
  }
}
